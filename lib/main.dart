// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart'; // Import Firebase
import 'package:go_router/go_router.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart'; // For Isar path

import 'firebase_options.dart'; // Generated by flutterfire configure
import 'core/theme/yorus_theme.dart'; // We'll create this next
import 'features/auth/presentation/screens/auth_screen.dart'; // Create these files soon
import 'features/home/presentation/screens/home_screen.dart';
import 'data/local/models/media_item_model.dart'; // Isar model, create soon

// Providers for core services
// (These will be moved to core/providers.dart later, but good to start here)

// Isar database provider
final isarProvider = FutureProvider<Isar>((ref) async {
  final dir = await getApplicationSupportDirectory();
  final isar = await Isar.open(
    [MediaItemSchema], // Add all your Isar schemas here
    directory: dir.path,
    name: 'yorus_db',
  );
  return isar;
});

// GoRouter configuration
final goRouterProvider = Provider<GoRouter>((ref) {
  return GoRouter(
    initialLocation: '/',
    routes: [
      GoRoute(
        path: '/',
        builder: (context, state) => const AuthScreen(), // Default to Auth
      ),
      GoRoute(
        path: '/home',
        builder: (context, state) => const HomeScreen(),
      ),
      // Add other top-level routes here
    ],
    // TODO: Implement redirect logic based on auth state (later)
    redirect: (context, state) {
      // For now, no redirect. We'll add auth check here later.
      return null;
    },
  );
});


void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Required for Firebase, Isar

  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const ProviderScope(child: YorusApp()));
}

class YorusApp extends ConsumerWidget {
  const YorusApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final router = ref.watch(goRouterProvider); // Get the GoRouter instance

    return MaterialApp.router(
      title: 'Yorus',
      theme: YorusTheme.lightTheme, // Use our custom theme
      routerConfig: router, // Connect GoRouter to MaterialApp
      debugShowCheckedModeBanner: false,
    );
  }
}